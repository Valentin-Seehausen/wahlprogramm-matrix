plot
plot(1,2)
plot(1,2,3,4)
plot([1,2,3],[1,2,3])
matrix(1,2,3,4)
matrix(1,2,3,4,5)
matrix(1,2,3,4)
matrix(1,2,3)
matrix(1,2)
matrix(1,2,3)
plot(matrix(1,2,3))
bsp4 <- data.frame( Name=character(), Geschlecht=factor(), Lieblingsfarbe=factor(), Einkommen=numeric() )
bsp4 <- structure(list(Name = c("Hans", "Caro", "Lars", "Ines", "Samira", "Peter", "Sarah"), Geschlecht = structure(c(2L, 3L, 1L, 3L, 3L,2L, 3L), .Label = c("intersexuell", "maennlich", "weiblich"), class = "factor"),Lieblingsfarbe = structure(c(3L, 1L, 2L, 4L, 2L, 3L, 1L), .Label = c("blau","gelb", "gruen", "schwarz"), class = "factor"), Einkommen = c(1233,800,2400,4000,899,1100,1900)), .Names = c("Name","Geschlecht", "Lieblingsfarbe", "Einkommen"), row.names = c(NA,7L), class = "data.frame")
View(bsp4)
bsp4
plot(bsp4)
mean(subset(bsp4$Einkommen,bsp4$Geschlecht=="weiblich"))
plot(subset(bsp4$Einkommen,bsp4$Geschlecht=="weiblich"))
plot(subset(bsp4$Einkommen,bsp4$Geschlecht))
plot(subset(bsp4$Einkommen,bsp4$Geschlecht=="weiblich"))
bsp4$Einkommen
plot(bsp4$Einkommen)
plot(bsp4$Einkommen, bsp4$Einkommen)
plot(bsp4$Einkommen)
plot
t.test
mean(bsp4$Einkommen)
library(maps)
install.packages
install.packages("maps")
install.packages("maps", dependencies = TRUE)
install.packages("mapproj", dependencies = TRUE)
install.packages("mapproj", dependencies = TRUE)
install.packages("mapproj", dependencies = TRUE)
install.packages("maps", dependencies = TRUE)
library(maps)
library(mapproj)
quakes <- read.csv('http://datasets.flowingdata.com/earthquakes1974.csv')
View(quakes)
par(mar=c(0,0,0,0))
map("world", col="orange", bg="#000000", fill=FALSE, interior=TRUE, lwd=0.5, projection="cylequalarea", par=0, wrap=TRUE)
ptsproj <- mapproject(quakes$longitude, quakes$latitude)
points(ptsproj, pch=20, cex=0.15, col="#ffffff40")
quakes.o <- quakes[order(quakes$mag, decreasing=TRUE),]
View(quakes.o)
majorpts <- mapproject(quakes.o$longitude[1:10], quakes.o$latitude[1:10])
symbols(majorpts, circles=rep(0.03, 10), add=TRUE, inches=FALSE, fg="green", lwd=2)
symbols(majorpts, circles=rep(0.03, 10), add=TRUE, inches=FALSE, fg="green", lwd=2)
symbols(majorpts, circles=rep(0.03, 10), add=TRUE, inches=FALSE, fg="red", lwd=2)
system.file()
install.packages("tm", dependencies = TRUE)
system.file("texts", "crude", package = "tm")
system.file("~", "crude", package = "tm")
system.file("~", "Desktop", package = "tm")
system.file("texts", "crude", package = "tm")
system.file("texts", "crude")
system.file()
system.file("~")
system.file("/")
install.packages("Snowball")
install.packages("snowball")
Corpus(DirSource('.'))
library("tm")
Corpus(DirSource('.'))
DirSource('.')
pwd()
setwd('~/code/document-matrix')
dir()
setwd('~/code/document-matrix/agendas')
dir()
Corpus(DirSource('.'))
c <- Corpus(DirSource('.'))
getTransformations()
c
c$CDU.md
getTransformations()
stopwords('de')
c.tm_map(removeWords, stopwords('de'))
c
c <- tm_map(c, tolower)
c <- tm_map(c, stripWhitespace)
getTransformations
getTransformations()
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removePunctuation)
c$CDU.md
c <- tm_map(c, removeWords, stopWords('de'))
c$CDU.md
c <- Corpus(DirSource('.'))
c.tm_map(removeWords, stopwords('de'))
c <- tm_map(c, tolower)
c <- tm_map(c, stripWhitespace)
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removeWords, stopwords('de'))
c$CDU.md
c <- tm_map(c, stripWhitespace)
c$CDU.md
c <- tm_map(c, removePunctuation)
c$CDU.md
stemDocument(c$CDU.md, language='german')
c <- tm_map(c, stemDocument, 'german')
c$CDU.md
DocumentTermMatrix(c)
DocumentTermMatrix(c)[1:5,1:5]
inspect(DocumentTermMatrix(c)[1:5,1:5])
findFreqTerms(DocumentTermMatrix(c), 5)
inspect(c)
inspect(DocumentTermMatrix(c)[1:5,1:5])
DocumentTermMatrix(c, control = list(weighting = weightTfIdf))
removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4)
removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.9)
removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.2)
removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.3)
removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4)
inspect(removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4))
corpus -> Corpus(DirSource('agendas/split'))
corpus <- Corpus(DirSource('agendas/split'))
corpus <- Corpus(DirSource('./agendas/split'))
corpus <- Corpus(DirSource('.'))
ls()
dir()
setwd('~/code/document-matrix/agendas/split/')
corpus <- Corpus(DirSource('.'))
inspect(corpus)
stemDocument(c$CDU.md, language='german')
source('~/.active-rstudio-document')
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4)
setwd('~/code/document-matrix/agendas/split/')
c <- Corpus(DirSource('.'))
c <- tm_map(c, tolower)
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removePunctuation)
c <- tm_map(c, stripWhitespace)
c <- tm_map(c, removeWords, stopwords('de'))
c <- tm_map(c, stemDocument, 'german')
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4)
c <- Corpus(DirSource('./split'))
c <- tm_map(c, tolower)
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removePunctuation)
c <- tm_map(c, stripWhitespace)
c <- tm_map(c, removeWords, stopwords('de'))
c <- tm_map(c, stemDocument, 'german')
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4)
dir()
setwd('~/code/document-matrix/agendas/split/')
c <- Corpus(DirSource('.'))
c <- tm_map(c, tolower)
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removePunctuation)
c <- tm_map(c, stripWhitespace)
c <- tm_map(c, removeWords, stopwords('de'))
c <- tm_map(c, stemDocument, 'german')
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.4)
inspect(tfidf)
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.6)
inspect(tfidf)
tfidf <- DocumentTermMatrix(c, control = list(weighting = weightTfIdf))
inspect(tfidf[0..2,0..2])
inspect(tfidf[0:2,0:2])
inspect(tfidf[0:10,0:10])
tfidf
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.9)
tfidf
tfidf <- removeSparseTerms(DocumentTermMatrix(c, control = list(weighting = weightTfIdf)), 0.95)
tfidf
inspect(tfidf)
dist(tfidf)
dist(tfidf)[0:5,0:5]
dist(tfidf)
tfidf
as.matrix(tfidf)
dist(as.matrix(tfidf))
dist <- dist(as.matrix(tfidf))
write.table(dist,file="test.txt")
dist <- dist(as.data.frame(as.matrix(tfidf)))
write.table(dist,file="test.txt")
dist(as.data.frame(tfidf))
as.matrix(tfidf)
as.matrix(tfidf)[0:5,0:5]
as.matrix(tfidf)[0:5,0:10]
as.matrix(tfidf)[0:100,0:5]
as.matrix(tfidf)[0:100,0:3]
dist(as.matrix(tfidf))[0:5,0:5]
dist(as.matrix(tfidf))
matrix
matrix()
dist(matrix())
dist(matrix([1,2,3]))
dist(matrix((1,2,3))
matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
dist(matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2))
dist(matrix(
c(2, 4, 3, 1, 5, 7),
nrow=2,
ncol=2))
dist(matrix(
c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=3))
dist(matrix(
c(2, 4, 3, 1, 5, 7),
nrow=4,
ncol=4))
dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1),
nrow=4,
ncol=4))
dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4))
dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4))[1:2]
dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4))[1:2, 1:2]
dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4))[1:3]
dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4))
as.data.frame(dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4)))
as.matrix(dist(matrix(
c(2, 4, 3, 1, 5, 7, 1, 1, 1, 1, 1, 1),
nrow=4,
ncol=4)))
tfidf[0:5,0:5]
as.matrix(tfidf[0:5,0:5])
as.matrix(tfidf[0:3,0:3])
dist(as.matrix(tfidf[0:3,0:3]))
as.matrix(dist(as.matrix(tfidf[0:3,0:3])))
write.csv(as.matrix(dist(as.matrix(tfidf[0:3,0:3]))))
distance_matrix <- as.matrix(dist(as.matrix(tfidf)))
distance_matrix[0:2,0:2]
distance_matrix[0:5,0:5]
distance_matrix[0:10,0:10]
install.packages('rjson')
install.packages('rjson', true)
install.packages('rjson', TRUE)
install.packages('rjson', dependecies = TRUE)
install.packages('rjson', dependencies = TRUE)
library('rjson')
distance_matrix[0:5,0:5]
toJSON(distance_matrix[0:5,0:5])
toJSON(as.data.frame(distance_matrix[0:5,0:5]))
as.data.frame(distance_matrix[0:5,0:5])
as.list(as.data.frame(distance_matrix[0:5,0:5]))
colnames(as.data.frame(distance_matrix[0:5,0:5]))
colnames(distance_matrix[0:5,0:5])
colnames(distance)
distance <- dist(as.matrix(tfidf))
distance_matrix <- as.matrix(distance)
distance <- dist(as.matrix(tfidf))
colnames(distance)
colnames(distance_matrix)
colnames(distance_matrix[0:5,0:5])
list(
traits = colnames(tmp),
values = unname(apply(tmp, 1, function(x) as.data.frame(distance_matrix[0:5,0:5])))
)
list(
traits = colnames(distance_matrix[0:5,0:5]),
values = unname(apply(distance_matrix[0:5,0:5], 1, function(x) as.data.frame(t(x))))
)
toJSON(list(
traits = colnames(distance_matrix[0:5,0:5]),
values = unname(apply(distance_matrix[0:5,0:5], 1, function(x) as.data.frame(t(x))))
))
distance_matrix
mapply(rep, 1:4, 4:1)
1:4
m <- distance_matrix[0:5,0:5]
m
d <- as.data.frame(m)
d
d$CDU.mdaa
rownames(d)
lapply(1:3)
lapply(1:3, function(x) { x })
lapply(1:3, function(x) { x = x })
lapply(1:3, function(x) { 3 = x })
lapply(1:3, function(x) { foo = x })
list(foo = )
list(foo = 3)
list(foo = 3, bar = 4)
x
x <- list(1:3)
x
names(x)
names(x) <- foo
names(x) <- "foo"
names(x)
x
d
as.list(d)
l <- as.list(d)
lapply(l, as.list)
lapply(lapply(l, as.list), colnames(d))
lapply(lapply(l, as.list), colnames(d))
colnames(d)
lapply(lapply(l, as.list), colnames, d)
lapply(lapply(l, as.list), colnames, as.list(d)
)
colnames(d)
length(colnames(d))
list(1,2,3,4,5)
myl <- list(1,2,3,4,5)
lapply(lapply(l, as.list), names, colnames(d)
)
lapply(lapply(l, as.list), function(x) { names(x) <- colnames(d)})
lapply(lapply(l, as.list), function(x) { names(x) <- colnames(d); x})
toJSON(lapply(lapply(l, as.list), function(x) { names(x) <- colnames(d); x}))
toJSON(lapply(lapply(d, as.list), function(x) { names(x) <- colnames(d); x}))
setwd('~/code/document-matrix/agendas/split/')
c <- Corpus(DirSource('.'))
c <- tm_map(c, tolower)
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removePunctuation)
c <- tm_map(c, stripWhitespace)
c <- tm_map(c, removeWords, stopwords('de'))
c <- tm_map(c, stemDocument, 'german')
tfidf <- DocumentTermMatrix(c, control = list(weighting = weightTfIdf))
distance <- dist(as.matrix(tfidf))
distance_matrix <- as.matrix(distance)
distance_matrix_data <- as.data.frame(distance_matrix)
json <- toJSON(
lapply(
lapply(distance_matrix_data, as.list)
, function(x) { names(x) <- colnames(distance_matrix_data); x}))
json
write(json, 'distance.json')
c
as.data.frame(c)
as.list(c)
c
toJSON
toJSON(c)
c$CDU.mdaa
setwd('~/code/document-matrix/agendas/split/')
c <- Corpus(DirSource('.'))
c <- tm_map(c, tolower)
c <- tm_map(c, removeNumbers)
c <- tm_map(c, removePunctuation)
c <- tm_map(c, removeWords, stopwords('de'))
c <- tm_map(c, stripWhitespace)
c <- tm_map(c, stemDocument, 'german')
tfidf <- DocumentTermMatrix(c, control = list(weighting = weightTfIdf))
distance <- dist(as.matrix(tfidf))
distance_matrix <- as.matrix(distance)
distance_matrix_data <- as.data.frame(distance_matrix)
json <- toJSON(
lapply(
lapply(distance_matrix_data, as.list)
, function(x) { names(x) <- colnames(distance_matrix_data); x}))
setwd('~/code/document-matrix/agendas/')
write(json, 'distances.json')
as.list(c)
c[1]
toJSON(c[1])
setwd('~/code/document-matrix/agendas/split/')
dir()
as.list(dir())
lapply(dir(), names<-, dir())
names<-
()
lapply(dir(), setNames, dir())
dir()
length(dir())
lapply(dir(), setNames, dir
())
lapply(dir(), identity)
dir()
setNames(dir(), dir())
lapply(setNames(dir(), dir()), readPlain)
readPlain('SPD.mdcf')
readTable('SPD.mdcf')
read.table('SPD.mdcf')
original <- Corpus(DirSource('.'))
original
toJSON(original)
original$CDU.mdaa
write(toJSON(original), 'agendas.json')
as.list(original$CDU.mdaa)
paste(as.list(original$CDU.mdaa))
paste(as.list(original$CDU.mdaa), '\n')
apply(paste, as.list(original$CDU.mdaa), '\n')
apply(as.list(original$CDU.mdaa), paste, '\n')
paste.call(as.list(original$CDU.mdaa), '\n')
paste(vector('a', 'b'))
paste(list('a', 'b'))
paste(unlist(list('a', 'b'))
)
paste('a', 'b')
mapply(paste, list('a', 'b'))
mapply(paste, 'a', 'b')
Reduce(paste, list('a', 'b'))
Reduce(paste, list('a', 'b', 'c'))
do.call(paste, list('a', 'b', 'c'))
do.call(paste, as.list(original$CDU.mdaa), '\n')
do.call(paste, original$CDU.mdaa, '\n')
do.call(paste, as.list(original$CDU.mdaa), '\n')
as.list(original$CDU.mdaa)
do.call(paste, as.list(original$CDU.mdaa))
do.call(paste, as.list(original$CDU.mdaa, '\n'))
as.list(original$CDU.mdaa, '\n')
as.list(original$CDU.mdaa)
c(1,2)
c(list(1,2),2)
c(1,2,3)
c(c(1,2),3)
c(list(1,2),3)
c(list(1,2),list(3,4)
)
as.list(original$CDU.mdaa)
do.call(paste, c(as.list(original$CDU.mdaa), '\n'))
do.call(paste, c(as.list(original$CDU.mdaa), "\n"))
original$CDU.mdaa
as.list(original$CDU.mdaa)
as.array(original$CDU.mdaa)
as.character(original$CDU.mdaa)
as.PlainTextDocument(original$CDU.mdaa)
as.array(original$CDU.mdaa)
toJSON(as.array(original$CDU.mdaa))
toJSON(as.character(original$CDU.mdaa))
as.character(original$CDU.mdaa)
do.call(paste, as.character(original$CDU.mdaa))
do.call(paste, as.list(original$CDU.mdaa))
do.call(paste, as.list(c(original$CDU.mdaa, "\n"))
)
do.call(paste, as.list(c(original$CDU.mdaa))
)
as.list(original$CDU.mdaa)
c(as.list(original$CDU.mdaa), "\n")
do.call(paste, c(as.list(original$CDU.mdaa), "\n"))
inspect(do.call(paste, c(as.list(original$CDU.mdaa), "\n")))
toJSON(do.call(paste, c(as.list(original$CDU.mdaa), "\n")))
Reduce(paste, as.list(original$CDU.mdaa))
Reduce(paste, as.list(original$CDU.mdaa), "\n")
Reduce(function(x,y) {paste(x,y,"\n")}, as.list(original$CDU.mdaa))
toJSON(Reduce(function(x,y) {paste(x,y,"\n")}, as.list(original$CDU.mdaa)))
toJSON(Reduce(function(x,y) {paste(x,y,"\n", TRUE)}, as.list(original$CDU.mdaa)))
toJSON(Reduce(function(x,y) {paste(x,y,"\n", ' ')}, as.list(original$CDU.mdaa)))
