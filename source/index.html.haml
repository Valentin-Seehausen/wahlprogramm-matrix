:sass
  $numDocs: #{data.agendas.map(&:last).reduce(:+).count}
  $distLevels: 10
  @for $doc from 0 to $numDocs
    .doc-\#{$doc}-selected
      @for $level from 0 to $distLevels
        .dist-\#{$doc}-\#{$level}
          color: rgb(255-$level/$distLevels*255, 0, 0)

%header
  %h1 Wahlprogramm-Matrix
  %p.manual
    Wähle Paragraphen per Mausklick aus und andere thematisch ähnliche Paragraphen werden farblich hervorgehoben.
  %p.description
    Dies ist ein Experiment von Martin Honermeyer, Yannic Schencking und Daniel Kirsch für Code for Münster.

- dist = data.distances.inject({}) { |h, (i,j,s)| h.update [i,j] => (s*10).floor, [j,i] => (s*10).floor }
- all_docs = data.agendas.map(&:last).reduce(:+)

#container
  #spd.sub-container
    %h2 SPD
    - data.agendas.spd.each do |p|
      %h3= p.title
      - score_classes = all_docs.map { |doc| (d = dist[[p.id, doc.id]]) && "dist-#{doc.id}-#{d}" }.compact
      .doc{id: "doc-#{p.id}", class: score_classes, data: {click: "doc-#{p.id}-selected"}}
        = GitHub::Markdown.render p.text
  #cdu.sub-container
    %h2 CDU
    - data.agendas.cdu.each do |p|
      %h3= p.title
      - score_classes = all_docs.map { |doc| (d = dist[[p.id, doc.id]]) && "dist-#{doc.id}-#{d}" }.compact
      .doc{id: "doc-#{p.id}", class: score_classes, data: {click: "doc-#{p.id}-selected"}}
        = GitHub::Markdown.render p.text
  #gruene.sub-container
    %h2 Grüne
    - data.agendas.gruene.each do |p|
      %h3= p.title
      - score_classes = all_docs.map { |doc| (d = dist[[p.id, doc.id]]) && "dist-#{doc.id}-#{d}" }.compact
      .doc{id: "doc-#{p.id}", class: score_classes, data: {click: "doc-#{p.id}-selected"}}
        = GitHub::Markdown.render p.text
