- numbers = %w[zero one two three four five six seven]
- dist = data.distances
- estimator = Quantile::Estimator.new
- dist.each { |_,v| v.each { |_,v| estimator.observe(v) } }
- agendas = data.documents
- all_docs = agendas.map(&:last).reduce(:+)
- min = estimator.query(0.95)
- max = estimator.query(1)
- outlier = estimator.query(0.4)
- # map the interval [min, max] to clamped [1, 0] interval and then quantize to ten distance levels
- quantize = lambda { |d| ([[(max-d)/(max-min), 0].max, 1].min*10).round }
- is_outlier = lambda { |doc| (data.distances[doc.id][:avg] || 1) < outlier }
- # closest = { "d1p0": ["d1p2", "d2p34", ...] }
- closest = data.closest
- score_classes_fn = lambda { |p| all_docs.map { |doc| [doc, dist[p.id][doc.id]] }.select { |(doc, d)| d.is_a?(Numeric) && d > min }.map { |(doc, d)| [doc, quantize[d]] }.map { |(doc, d)| "dist-#{doc.id.gsub('.','')}-#{d}" } }
- sass_doc_list = all_docs.map(&:id).map { |id| id.gsub('.','') }.map(&:inspect).join(', ')

:sass
  $docs: #{sass_doc_list}
  $distLevels: 10
  @each $doc in $docs
    .doc-\#{$doc}-selected
      @for $level from 0 to $distLevels
        .doc.dist-\#{$doc}-\#{$level}
          background-color: rgba(255, 0, 0, (1-$level/$distLevels)/2)
        a.dist-\#{$doc}-\#{$level}
          background-color: rgba(255, 0, 0, 1-$level/$distLevels)

#article-container
  %article
    %h1#main-title Wer ist eigentlich die AfD?
    %h2#sub-title Ein Denkanstoß auf Basis von Data Science
    %p Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    %h2 Lügenpresse! Die Auswahl der ähnlichen Abschnitte ist subjektiv!
    %p Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    %h2 Jetzt mal Klartext: Ist die AfD wirklich so ähnlich zu anderen Parteien?
    %p Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

#help-container
  #help-content
    %h1 Wahlprogramme selbst vergleichen
    %p#description
      Hier kannst du die Parteiprogramme - mit Unterstützung des Algorithmus - selbst vergleichen.
    %h2 Wie benutze ich das Tool?
    %ul#manual-text
      %li
        Klicke auf einen Paragraphen um ihn auszuwählen. Der ausgewählte Paragraph und weitere thematisch ähnliche werden
        %span.highlight-similar farblich
        hervorgehoben. Zudem scrollen alle Wahlprogramme automatisch zum thematisch ähnlichsten Paragraphen.
      %li
        Die Scroll-Leisten zeigen durch
        %span.highlight-similar farbliche
        Hinterlegung an, wo im zugehörigen Wahlprogramm weitere thematisch ähnliche Paragraphen zu finden sind. Klicke auf die Leiste um zum Paragraphen zu springen.
      %li Führe die Maus über die Scroll-Leiste um für die Paragraphen relevante Begriffe zu sehen.
      %li
        Außenseiter sind
        %span.highlight-outlier blau
        hervorhehoben. Diese Paragraphen haben zu allen anderen Paragraphen einen hohen semantischen Abstand.

#wrapper
  #container{class: numbers[agendas.keys.size]}
    - agendas.each_with_index do |(title, paragraphs), i|
      .sub-container{class: title.downcase}
        .minimap{class: numbers[i+1]}
          .scroll-indicator(draggable="true")
          - paragraphs.each do |p|
            - classes = score_classes_fn[p]
            - classes << 'outlier' if is_outlier[p]
            - classes << 'jump-to-paragraph'
            %a{href: "##{p.id.gsub('.','')}", "data-target" => "##{p.id.gsub('.','')}", style: "height: #{100.0*p.text.length/paragraphs.map(&:text).map(&:length).reduce(:+)}%", class: classes, :"data-important" => data.important[p.id].keys.join(', ')}
        .sub-container-title-bar.party-name
          %h1= title
        .scroll-container
          .wrapper
            %h1.party-name= title
            - paragraphs.each do |p|
              - classes = score_classes_fn[p]
              - classes << 'outlier' if is_outlier[p]
              - closest_to_paragraph = closest[p.id].select {|h| h.dist > min }.map {|h| "##{h.doc }" } - ["##{p.id}"]
              .doc{id: "#{p.id.gsub('.','')}", class: classes, data: {click: "doc-#{p.id.gsub('.','')}-selected", closest: closest_to_paragraph}}
                = GitHub::Markdown.render p.text
