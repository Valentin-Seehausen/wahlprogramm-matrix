:sass
  $numDocs: #{data.agendas.map(&:last).reduce(:+).count}
  $distLevels: 10
  @for $doc from 0 to $numDocs
    .doc-\#{$doc}-selected
      @for $level from 0 to $distLevels
        .doc.dist-\#{$doc}-\#{$level}
          color: rgb(255-$level/$distLevels*255, 0, 0)
        a.dist-\#{$doc}-\#{$level}
          background-color: rgb(255-$level/$distLevels*255, 0, 0)

%header
  %h1.cell Wahlprogramm-Matrix
  %p.manual.cell
    Wähle Paragraphen per Mausklick aus und andere thematisch ähnliche Paragraphen werden farblich hervorgehoben.
  %p.tech.cell
    Die Ähnlichkeit wurde rein maschinell ermittelt (mit Elasticsearch).
    %small Und benötigt noch etwas Arbeit... ;)
  %p.description.cell
    Dies ist ein Experiment von <a href="http://kirelabs.org">Daniel Kirsch</a>, <a href="https://github.com/djmaze">Martin Honermeyer</a>, <a href="https://github.com/webwurst">Tobias Bradtke</a> und <a href="https://github.com/jahnique">Yannic Schencking</a> für
  #logo.cell
    %a{href:'http://codeformuenster.org'}
      %img{src:'http://codeformuenster.org/img/cfm_logo.png', alt:'Code for Münster'}

- dist = data.distances.inject({}) { |h, (i,j,s)| h.update [i,j] => (s*10).floor, [j,i] => (s*10).floor }
- all_docs = data.agendas.map(&:last).reduce(:+)

#container
  #spd-minimap.minimap
    - data.agendas.SPD.each do |p|
      - score_classes = all_docs.map { |doc| (d = dist[[p.id.to_i, doc.id.to_i]]) && "dist-#{doc.id}-#{d}" }.compact
      %a{href: "#doc-#{p.id}", style: "height: #{100.0*p.text.length/data.agendas.SPD.map(&:text).map(&:length).reduce(:+)}%", class: ["dist-#{p.id}-0"] + score_classes}
  #spd.sub-container
    %h2 SPD
    - data.agendas.SPD.each do |p|
      - score_classes = all_docs.map { |doc| (d = dist[[p.id.to_i, doc.id.to_i]]) && "dist-#{doc.id}-#{d}" }.compact
      .doc{id: "doc-#{p.id}", class: ["dist-#{p.id}-0"] + score_classes, data: {click: "doc-#{p.id}-selected"}}
        %h3= p.title
        = GitHub::Markdown.render p.text
  #cdu-minimap.minimap
    - data.agendas.CDU.each do |p|
      - score_classes = all_docs.map { |doc| (d = dist[[p.id.to_i, doc.id.to_i]]) && "dist-#{doc.id}-#{d}" }.compact
      %a{href: "#doc-#{p.id}", style: "height: #{100.0*p.text.length/data.agendas.CDU.map(&:text).map(&:length).reduce(:+)}%", class: ["dist-#{p.id}-0"] + score_classes}
  #cdu.sub-container
    %h2 CDU
    - data.agendas.CDU.each do |p|
      - score_classes = all_docs.map { |doc| (d = dist[[p.id.to_i, doc.id.to_i]]) && "dist-#{doc.id}-#{d}" }.compact
      .doc{id: "doc-#{p.id}", class: ["dist-#{p.id}-0"] + score_classes, data: {click: "doc-#{p.id}-selected"}}
        %h3= p.title
        = GitHub::Markdown.render p.text
  #gruene-minimap.minimap
    - data.agendas.Gruene.each do |p|
      - score_classes = all_docs.map { |doc| (d = dist[[p.id.to_i, doc.id.to_i]]) && "dist-#{doc.id}-#{d}" }.compact
      %a{href: "#doc-#{p.id}", style: "height: #{100.0*p.text.length/data.agendas.Gruene.map(&:text).map(&:length).reduce(:+)}%", class: ["dist-#{p.id}-0"] + score_classes}
  #gruene.sub-container
    %h2 Grüne
    - data.agendas.Gruene.each do |p|
      - score_classes = all_docs.map { |doc| (d = dist[[p.id.to_i, doc.id.to_i]]) && "dist-#{doc.id}-#{d}" }.compact
      .doc{id: "doc-#{p.id}", class: ["dist-#{p.id}-0"] + score_classes, data: {click: "doc-#{p.id}-selected"}}
        %h3= p.title
        = GitHub::Markdown.render p.text
